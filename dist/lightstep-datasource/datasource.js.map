{"version":3,"sources":["../../src/lightstep-datasource/datasource.js"],"names":["_","moment","appEvents","kbn","maxDataPointsServer","minResolutionServer","version","on","link","get","options","window","open","LightStepDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","url","dashboardURL","jsonData","name","q","organizationName","projectName","apiKey","targets","filter","t","hide","maxDataPoints","length","when","data","targetResponses","flatMap","interpolatedIds","replace","target","interpolatedNames","replaceWithText","undefined","streamIds","split","streamNames","zip","map","streamId","pair","streamName","query","buildQueryParameters","showErrorCountsAsRate","Boolean","response","doRequest","method","params","then","result","displayName","res","all","results","attributes","ops","parseCount","errs","parseRateFromCounts","concat","parseLatencies","parseExemplars","status","message","title","catch","error","interpolated","queryMapper","defaultMapper","parseQuery","streams","stream","id","trim","text","value","matches","match","parseStreamIdsQuery","parseAttributesQuery","Error","attribute_name","operator","filter_value","applyOperator","attribute","not","charAt","substring","regex","RegExp","test","headers","datasourceRequest","oldest","range","from","youngest","to","resolutionMs","resolution","scopedVars","getScopedVars","interval_to_ms","Math","max","diff","min","format","floor","showExemplars","showOpsCounts","showErrorCounts","extractPercentiles","percentiles","timeRange","msRange","sRange","round","regularRange","secondsToHms","__interval","interval","__range","timeWindows","timeWindow","latencies","datapoints","exemplars","exemplarMap","groupBy","exemplar","parseExemplar","skip","ceil","ignored","index","traceLink","spanGuid","key","errors","timeMap","forEach","p","timestamp","curr","errCount","opsCount","Object","keys","k","v","toString","percentile"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport appEvents from 'app/core/app_events';\nimport kbn from 'app/core/utils/kbn';\n\nconst maxDataPointsServer = 1440;\nconst minResolutionServer = 60000;\nconst version = 'v0.2';\n\n// TODO - this is a work around given the existing graph API\n// Having a better mechanism for click capture would be ideal.\nappEvents.on('graph-click', options => {\n  const link = _.get(options, [\n    'ctrl',\n    'dataList',\n    _.get(options, ['item', 'seriesIndex']),\n    'datapoints',\n    _.get(options, ['item', 'dataIndex']),\n    'link',\n  ]);\n  if (link) {\n    window.open(link, '_blank');\n  }\n});\n\nexport class LightStepDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.dashboardURL = instanceSettings.jsonData.dashboardURL;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n    this.organizationName = instanceSettings.jsonData.organizationName;\n    this.projectName = instanceSettings.jsonData.projectName;\n    this.apiKey = instanceSettings.jsonData.apiKey;\n  }\n\n  headers() {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': \"BEARER \" + this.apiKey,\n    };\n  }\n\n  query(options) {\n    const targets = options.targets.filter(t => !t.hide);\n    const maxDataPoints = options.maxDataPoints;\n\n    if (targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    const targetResponses = targets.flatMap(target => {\n      const interpolatedIds = this.templateSrv.replace(target.target, null, 'pipe');\n      const interpolatedNames = this.templateSrv.replaceWithText(target.target);\n\n      if (!interpolatedIds) {\n        return this.q.when(undefined);\n      }\n\n      const streamIds = interpolatedIds.split('|');\n      const streamNames = interpolatedNames.split(' + ');\n      return _.zip(streamIds, streamNames).map(pair => {\n        const streamId = pair[0];\n        const streamName = pair[1];\n        const query = this.buildQueryParameters(options, target, maxDataPoints);\n        const showErrorCountsAsRate = Boolean(target.showErrorCountsAsRate); \n        const response = this.doRequest({\n          url: `${this.url}/public/${version}/${this.organizationName}/projects/${this.projectName}/streams/${streamId}/timeseries`,\n          method: 'GET',\n          params: query,\n        });\n\n        response.then(result => {\n          if (result && result[\"data\"][\"data\"]) {\n            if (target.displayName) {\n              result[\"data\"][\"data\"][\"name\"] = this.templateSrv.replaceWithText(target.displayName);\n            } else {\n              result[\"data\"][\"data\"][\"name\"] = streamName;\n            }\n          }\n        });\n\n        return response.then((res) => {\n          res.showErrorCountsAsRate = showErrorCountsAsRate;\n          return res;\n        });\n      });\n      \n    });\n\n    return this.q.all(targetResponses).then(results => {\n      const data = _.flatMap(results, result => {\n        if (!result) {\n          return [];\n        }\n\n        const data = result[\"data\"][\"data\"];\n        const attributes = data[\"attributes\"];\n        const name = data[\"name\"];\n        const ops = this.parseCount(`${name} Ops counts`, \"ops-counts\", attributes);\n        let errs = this.parseCount(`${name} Error counts`, \"error-counts\", attributes);\n        if (result.showErrorCountsAsRate) {\n          errs = this.parseRateFromCounts(`${name} Error rate`, errs, ops);\n        }\n\n        return _.concat(\n          this.parseLatencies(name, attributes),\n          this.parseExemplars(name, attributes, maxDataPoints),\n          ops,\n          errs,\n        );\n      });\n\n      return { data: data };\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: `${this.url}/public/${version}/${this.organizationName}/projects/${this.projectName}`,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    }).catch(error => {\n      return { status: \"error\", message: error, title: \"Error \" };\n    });\n  }\n\n  annotationQuery(options) {\n    return this.q.when({});\n  }\n\n  metricFindQuery(query) {\n    const interpolated = this.templateSrv.replace(query, null, 'regex');\n\n    let queryMapper = this.defaultMapper();\n    if (interpolated) {\n      queryMapper = this.parseQuery(interpolated);\n    }\n\n    return this.doRequest({\n      url: `${this.url}/public/${version}/${this.organizationName}/projects/${this.projectName}/streams`,\n      method: 'GET',\n    }).then(response => {\n      const streams = response.data.data;  \n      return _.flatMap(streams, stream => {\n        const attributes = stream[\"attributes\"];\n        const name = attributes[\"name\"];\n        const query = attributes[\"query\"];\n        const streamId = stream[\"id\"];\n\n        return queryMapper(name, query, streamId);\n      });\n    });\n  }\n\n  defaultMapper() {\n    return (name, query, id) => {\n      // Don't duplicate if the name and query are the same\n      if (name.trim() === query.trim()) {\n        return [ { text: name, value: id } ];\n      }\n\n      return [\n        { text: query, value: id },\n        { text: name, value: id },\n      ];\n    }\n  }\n\n  parseQuery(query) {\n    const matches = query.match(/^(stream_ids|attributes)\\(.*/);\n    if (matches && matches.length == 2) {\n      switch (matches[1]) {\n        case \"stream_ids\":\n          return this.parseStreamIdsQuery(query);\n        case \"attributes\":\n          return this.parseAttributesQuery(query);\n      }\n    }\n    throw new Error(`Unknown query provided: ${query}`);\n  }\n\n  parseStreamIdsQuery(query) {\n    const matches = query.match(/stream_ids\\(([^\\!=~]+)(\\!?=~?)\"(.*)\"\\)$/)\n    if (matches && matches.length == 4) {\n      const attribute_name = matches[1],\n            operator = matches [2],\n            filter_value = matches[3];\n      return (name, query, id) => {\n        switch (attribute_name) {\n          case \"name\":\n            return this.applyOperator(name, operator, filter_value, id)\n          case \"query\":\n            return this.applyOperator(query, operator, filter_value, id)\n          default:\n            throw new Error(`Unknown attribute provided in the stream_ids() query: ${attribute_name}`);\n        }\n      }\n    }\n    throw new Error(`Unknown query provided: ${query}`);\n  }\n\n  applyOperator(attribute, operator, filter_value, id) {\n    let match;\n    let not = false;\n    if (operator.charAt(0) == \"!\") {\n      operator = operator.substring(1);\n      not = true;\n    }\n    switch (operator) {\n      case \"=\":\n        match = attribute == filter_value\n        break;\n      case \"=~\":\n        const regex = new RegExp(filter_value)\n        match = regex.test(attribute)\n        break;\n      default:\n        throw new Error(`Unknown operator provided: ${operator}`);\n    }\n    match ^= not;\n    return match ? [{ text: `${attribute}`, value: id }] : []\n  }\n\n  parseAttributesQuery(query) {\n    const matches = query.match(/^attributes\\(([^)]+)\\)$/);\n    if (matches && matches.length == 2) {\n      return (name, query, id) => {\n        switch (matches[1]) {\n          case \"name\":\n            return [{ text: name }]\n          case \"query\":\n            return [{ text: query }]\n          default:\n            throw new Error(`Unknown attribute provided in the attributes() query: ${matches[1]}`);\n        }\n      };\n    }\n    throw new Error(`Unknown query provided: ${query}`);\n  }\n\n  doRequest(options) {\n    options.headers = this.headers();\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options, target, maxDataPoints) {\n    const oldest = options.range.from;\n    const youngest = options.range.to;\n\n    let resolutionMs = null;\n    if (target.resolution) {\n      const scopedVars = this.getScopedVars(options);\n      const interpolated = this.templateSrv.replace(target.resolution, scopedVars)\n      resolutionMs = kbn.interval_to_ms(interpolated); \n    }\n    \n    if (!resolutionMs || resolutionMs < minResolutionServer) {\n      resolutionMs = Math.max(\n        youngest.diff(oldest) / Math.min(\n          maxDataPoints,\n          maxDataPointsServer\n        ),\n        minResolutionServer\n      );\n    }\n    \n    return {\n      \"oldest-time\": oldest.format(),\n      \"youngest-time\": youngest.format(),\n      \"resolution-ms\": Math.floor(resolutionMs),\n      \"include-exemplars\": target.showExemplars ? \"1\" : \"0\",\n      \"include-ops-counts\": target.showOpsCounts ? \"1\" : \"0\",\n      \"include-error-counts\": target.showErrorCounts ? \"1\" : \"0\",\n      \"percentile\": this.extractPercentiles(target.percentiles),\n    };\n  }\n\n  getScopedVars(options) {\n    const range = this.timeSrv.timeRange();\n    const msRange = range.to.diff(range.from);\n    const sRange = Math.round(msRange / 1000);\n    const regularRange = kbn.secondsToHms(msRange / 1000);\n    return {\n      __interval: { text: options.interval, value: options.interval },\n      __range: { text: regularRange, value: regularRange },\n    };\n  }\n\n  parseLatencies(name, attributes) {\n    if (!attributes[\"time-windows\"] || !attributes[\"latencies\"]) {\n      return [];\n    }\n\n    const timeWindows = attributes[\"time-windows\"].map(timeWindow => {\n      const oldest = moment(timeWindow[\"oldest-time\"]);\n      const youngest = moment(timeWindow[\"youngest-time\"]);\n      return moment((oldest + youngest) / 2);\n    });\n\n    return attributes[\"latencies\"].map(latencies => {\n      return {\n        target: `${name} p${latencies[\"percentile\"]}`,\n        datapoints: _.zip(latencies[\"latency-ms\"], timeWindows),\n      };\n    })\n  }\n\n  parseExemplars(name, attributes, maxDataPoints) {\n    const exemplars = attributes[\"exemplars\"];\n    if (!exemplars) {\n      return [];\n    }\n    const exemplarMap = _.groupBy(exemplars, exemplar => exemplar[\"has_error\"]);\n\n    return _.concat(\n      this.parseExemplar(`${name} traces`, exemplarMap[false], maxDataPoints),\n      this.parseExemplar(`${name} error traces`, exemplarMap[true], maxDataPoints),\n    )\n  }\n\n  parseExemplar(name, exemplars, maxDataPoints) {\n    if (!exemplars) {\n      return []\n    }\n    if (maxDataPoints && exemplars.length > maxDataPoints) {\n      const skip = Math.ceil(exemplars.length / maxDataPoints);\n      exemplars = exemplars.filter((ignored, index) => index % skip === 0);\n    }\n    return [{\n      target: name,\n      datapoints: exemplars.map(exemplar => {\n        return {\n          0: exemplar[\"duration_micros\"] / 1000,\n          1: moment(((exemplar[\"oldest_micros\"] + exemplar[\"youngest_micros\"]) / 2) / 1000),\n          \"link\": this.traceLink(exemplar),\n        };\n      }),\n    }];\n  }\n\n  traceLink(exemplar) {\n    const spanGuid = exemplar[\"span_guid\"];\n    if (!spanGuid) {\n      return\n    }\n    return `${this.dashboardURL}/${this.projectName}/trace?span_guid=${spanGuid}`\n  }\n\n  parseCount(name, key, attributes) {\n    if (!attributes[\"time-windows\"] || !attributes[key]) {\n      return [];\n    }\n\n    const timeWindows = attributes[\"time-windows\"].map(timeWindow => {\n      const oldest = moment(timeWindow[\"oldest-time\"]);\n      const youngest = moment(timeWindow[\"youngest-time\"]);\n      return moment((oldest + youngest) / 2);\n    });\n\n    return [{\n      target: name,\n      datapoints: _.zip(attributes[key], timeWindows),\n    }]\n  }\n\n  parseRateFromCounts(name, errors, ops) {\n    if (!errors[0] || !ops[0] || !errors[0].datapoints || !ops[0].datapoints || (errors[0].datapoints.length != ops[0].datapoints.length)) {\n      return [];\n    }\n  \n    let timeMap = {};\n    // make a map of moment ISO timestamps\n    errors[0].datapoints.forEach((p) => {\n      // store error count in 0\n      // store original moment object in 1\n      timeMap[p[1].format()] = [p[0], p[1]];\n    });\n\n    ops[0].datapoints.forEach((p) => {\n      let timestamp = p[1].format();\n      // retrieve corresponding error count value from timeMap\n      let curr = timeMap[timestamp]; // curr[0] = error count, curr[1] is original moment object\n      // only do math if the points exist & are non-zero\n      let errCount = curr[0];\n      if (!errCount) {\n        return;\n      }\n      let opsCount = p[0];\n      if (errCount == 0 || opsCount == 0) {\n        timeMap[timestamp] = [0, curr[1]];\n      } else {\n        let res = (errCount / opsCount)*100;\n        timeMap[timestamp] = [res, curr[1]];\n      }\n    });\n\n    let datapoints = Object.keys(timeMap).map((k) => {\n      // restore moment object\n      let v = timeMap[k];\n      return [v[0], v[1]];\n    });\n\n    return [{\n      target: name,\n      datapoints,\n    }];\n  }\n\n  extractPercentiles(percentiles) {\n    if (!percentiles) {\n      return [];\n    }\n    return (percentiles)\n      .toString()\n      .split(\",\")\n      .map(percentile => percentile.replace(/(^\\s+|\\s+$)/g,''))\n      .filter(percentile => percentile);\n  }\n}\n"]}